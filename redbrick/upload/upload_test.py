"""Tests for upload module."""
import json
import sys

import redbrick
import matplotlib.pyplot as plt  # type: ignore
from . import Upload
from redbrick.utils.segmentation import get_file_type


def test_mask_rbai() -> None:
    """Test mask to polygon conversion."""
    if sys.platform not in ("linux", "darwin"):
        # Don't run this test for windows, w/o rasterio will fail.
        assert True
        return
    # read mask that was generated by rbai export
    # i.e. rbai polygon -> png mask format
    mask = plt.imread(
        "redbrick/upload/mask_test/88664c8f-c6f8-4d5a-918e-41d8441a4509.png"
    )
    with open(
        "redbrick/upload/mask_test/class_map.json", "r", encoding="utf-8"
    ) as file:
        class_map = json.load(file)

    # convert the mask to rbai polygon
    dp_entry = Upload.mask_to_rbai(mask, class_map, "items123", "name123")

    # read original rbai polygon format
    with open(
        "redbrick/upload/mask_test/redbrick_export_segment.json", "r", encoding="utf-8"
    ) as file:
        datapoints = json.load(file)
    dp_entry_real = datapoints[0]

    # compare the two polygon formats to confirm mask -> polygon is correct
    for label_real in dp_entry_real["labels"]:
        for label in dp_entry["labels"]:
            if label_real["category"] == label["category"]:
                assert (
                    label_real["pixel"]["regions"].sort()
                    == label["pixel"]["regions"].sort()
                )

                if label_real["pixel"]["holes"]:
                    assert (
                        label_real["pixel"]["holes"].sort()
                        == label["pixel"]["holes"].sort()
                    )


def test_file_type_extraction() -> None:
    """Tests the extraction of MIME file type."""
    filepath = "folder/subfolder/image.png"
    filetype = get_file_type(filepath)
    assert filetype[0] == "png" and filetype[1] == "image/png"


def test_file_type_extraction_invalid() -> None:
    """Check invalid file extraction"""
    filepath = "folder/subfolder/image.csv"
    try:
        get_file_type(filepath)
        assert False
    except ValueError as error:
        assert type(error).__name__ == "ValueError"


def test_items_presigning() -> None:
    """Tests signing of an items list."""
    filepath = "redbrick/upload/mask_test/88664c8f-c6f8-4d5a-918e-41d8441a4509.png"
    filetype = get_file_type(filepath)[-1]

    api_key = "WgEsMl7Xyg1mYXYSw6v0poFy25ZnV3FtT0mD9E2L12o"
    org_id = "540abd9a-cb3b-4fd1-a14a-ccea6ae8c31e"
    project_id = "8bea083d-9e56-4874-b081-15dfd4097bdb"

    project = redbrick.get_project(
        api_key, "https://api.redbrickai.com", org_id, project_id
    )

    datapoints = [
        {
            "items": [
                "../sample-data/bccd/bccd/BloodImage_00000.jpg",
                "../sample-data/bccd/bccd/BloodImage_00001.jpg",
                "../sample-data/bccd/bccd/BloodImage_00002.jpg",
            ],
            "name": "video-1",
        },
        {
            "items": [
                "../sample-data/bccd/bccd/BloodImage_00003.jpg",
                "../sample-data/bccd/bccd/BloodImage_00004.jpg",
                "../sample-data/bccd/bccd/BloodImage_00005.jpg",
            ],
            "name": "video-2",
        },
    ]
    project.upload.create_datapoints(redbrick.StorageMethod.REDBRICK, datapoints)
