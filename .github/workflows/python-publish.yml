# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      pypi:
        description: PyPI
        required: true
        type: boolean
        default: false
      docker:
        description: Docker
        required: true
        type: boolean
        default: true

jobs:
  test-docs:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref_name == 'master') || (github.event_name == 'pull_request' && github.base_ref == 'master' && !github.event.pull_request.draft)
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m venv .venv
          .venv/bin/activate
          make install
          cd docs
          pip install -r requirements.txt
      - name: Build Docs
        run: |
          .venv/bin/activate
          cd docs
          make html SPHINXOPTS="-W"

  test:
    runs-on: ${{ matrix.os }}
    if: (github.event_name == 'push' && github.ref_name == 'master') || (github.event_name == 'pull_request' && github.base_ref == 'master' && !github.event.pull_request.draft)
    env:
      REDBRICK_SDK_API_KEY: ${{ secrets.REDBRICK_SDK_API_KEY }}
      REDBRICK_SDK_URL: ${{ secrets.REDBRICK_SDK_URL }}
      REDBRICK_SDK_ORG_ID: ${{ secrets.REDBRICK_SDK_ORG_ID }}
      REDBRICK_SDK_PROJECT_ID: ${{ secrets.REDBRICK_SDK_PROJECT_ID }}
      REDBRICK_SDK_SOURCE: GITHUB
      REDBRICK_SDK_DEBUG: 1
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m venv .venv
      - run: .venv/bin/activate
        if: matrix.os == 'ubuntu-latest'
      - run: source .venv/bin/activate
        if: matrix.os == 'macos-latest'
      - run: .venv\Scripts\activate
        if: matrix.os == 'windows-latest'
      - name: Install dependencies
        run: make install
      - name: Lint + Unit Tests
        run: make test

  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Build
        run: |
          python -m venv .venv
          .venv/bin/activate
          make build
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: redbrick-sdk
          path: dist
          retention-days: 100
      - id: config
        run: |
          cd dist
          RB_SDK_VERSION=`ls redbrick-sdk-*.tar.gz | sed 's/redbrick-sdk-//' | sed 's/.tar.gz//'`
          echo "v$RB_SDK_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "version=$RB_SDK_VERSION" >> "$GITHUB_OUTPUT"
    outputs:
      version: ${{ steps.config.outputs.version }}

  deploy-pypi:
    runs-on: ubuntu-latest
    needs:
      - build
    if: needs.build.result == 'success' && ((github.event_name == 'workflow_dispatch' && github.event.inputs.pypi) || github.event_name == 'release')
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          path: .
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m venv .venv
          .venv/bin/activate
          pip install --upgrade pip
          pip install twine
          twine upload dist/*

  deploy-docker:
    runs-on: ubuntu-latest
    needs:
      - build
    if: needs.build.result == 'success' && ((github.event_name == 'workflow_dispatch' && github.event.inputs.docker) || github.event_name == 'release')
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            Dockerfile
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          path: .
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: redbrickai/redbrick-sdk:latest,redbrickai/redbrick-sdk:${{ needs.build.outputs.version }}
        env:
          DOCKER_BUILDKIT: 1
